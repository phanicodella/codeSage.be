# Path: codeSage.be/src/utils/security_manager.py

from cryptography.fernet import Fernet
import secrets
import base64
import os
import json
import logging
from pathlib import Path
from typing import Dict

logger = logging.getLogger(__name__)

class SecurityManager:
    """Manages security keys and encryption for CodeSage"""
    
    CONFIG_FILE = 'security_config.enc'
    
    def __init__(self, config_dir: str = './config'):
        self.config_dir = Path(config_dir)
        self.config_dir.mkdir(parents=True, exist_ok=True)
        self.config_path = self.config_dir / self.CONFIG_FILE
        self._encryption_key = None
        self._load_or_generate_key()

    def _load_or_generate_key(self):
        """Load existing key or generate new one"""
        key_path = self.config_dir / 'master.key'
        if key_path.exists():
            with open(key_path, 'rb') as f:
                self._encryption_key = f.read()
        else:
            self._encryption_key = Fernet.generate_key()
            with open(key_path, 'wb') as f:
                f.write(self._encryption_key)

    def generate_installation_keys(self) -> Dict[str, str]:
        """Generate secure keys for new installation"""
        keys = {
            'SECRET_KEY': secrets.token_hex(32),
            'JWT_SECRET_KEY': secrets.token_hex(32),
            'INSTALL_ID': secrets.token_hex(8),
            'GENERATED_AT': str(secrets.SystemRandom().randrange(10**12))
        }
        
        # Encrypt and save keys
        fernet = Fernet(self._encryption_key)
        encrypted_data = fernet.encrypt(json.dumps(keys).encode())
        
        with open(self.config_path, 'wb') as f:
            f.write(encrypted_data)
            
        return keys

    def load_keys(self) -> Dict[str, str]:
        """Load and decrypt installation keys"""
        try:
            if not self.config_path.exists():
                return self.generate_installation_keys()
                
            with open(self.config_path, 'rb') as f:
                encrypted_data = f.read()
                
            fernet = Fernet(self._encryption_key)
            decrypted_data = fernet.decrypt(encrypted_data)
            return json.loads(decrypted_data)
            
        except Exception as e:
            logger.error(f"Failed to load security keys: {e}")
            raise

    def create_env_file(self, env_path: str = '.env'):
        """Create or update .env with security keys"""
        keys = self.load_keys()
        
        env_template = f"""# Generated by CodeSage Security Manager
# Installation ID: {keys['INSTALL_ID']}

# Server Settings
FLASK_APP=src/app.py
FLASK_ENV=development
DEBUG=True
API_HOST=localhost
API_PORT=5000

# Security
SECRET_KEY={keys['SECRET_KEY']}
JWT_SECRET_KEY={keys['JWT_SECRET_KEY']}
JWT_EXPIRATION_DAYS=30

# Model Settings
MODEL_PATH=./data/models
MODEL_NAME=Salesforce/codet5-base
MODEL_CACHE_DIR=./data/model_cache
MODEL_MAX_LENGTH=512

# Rest of settings...
"""
        with open(env_path, 'w') as f:
            f.write(env_template)

    def verify_installation(self) -> bool:
        """Verify installation integrity"""
        try:
            keys = self.load_keys()
            return all(k in keys for k in ['SECRET_KEY', 'JWT_SECRET_KEY', 'INSTALL_ID'])
        except:
            return False

def setup_security():
    """Initial security setup function"""
    try:
        sm = SecurityManager()
        sm.generate_installation_keys()
        sm.create_env_file()
        return True
    except Exception as e:
        logger.error(f"Security setup failed: {e}")
        return False

if __name__ == "__main__":
    if setup_security():
        print("Security setup completed successfully")
    else:
        print("Security setup failed")